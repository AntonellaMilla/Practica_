// src/store/useItemStore.js
import { create } from 'zustand';

// üîß IMPORTAR configuraci√≥n de API
import { apiConfig } from '../config/apiConfig';

// üåê CAMBIA AQU√ç LA API ACTUAL ‚Üí Rick and Morty, Dragon Ball, PokeAPI, etc.
const currentAPI = apiConfig.dragonBall; // ‚Üê CAMBIAS SOLO ESTA L√çNEA

export const useItemStore = create((set, get) => ({
  items: [],              // Lista general de √≠tems
  loading: false,         // Cargando √≠tems
  favorites: [],          // Lista de favoritos

  selectedItem: null,     // Detalle del √≠tem seleccionado
  loadingDetail: false,   // Estado de carga del detalle

  // üëâ Set manual de √≠tems si lo necesitas
  setItems: (items) => set({ items }),

  // ‚≠ê Agregar o quitar favoritos
  toggleFavorite: (item) => {
    const { favorites } = get();
    const exists = favorites.some((f) => f.id === item.id);
    set({
      favorites: exists
        ? favorites.filter((f) => f.id !== item.id)
        : [...favorites, item],
    });
  },

  // ‚úÖ Saber si un √≠tem es favorito
  isFavorite: (id) => get().favorites.some((f) => f.id === id),

  // üîç Obtener todos los √≠tems con filtro opcional
  fetchItems: async (search = "") => {
    set({ loading: true });

    try {
      // ‚úÖ PARTE QUE CAMBIA SEG√öN LA API USADA
      const response = await fetch(currentAPI.url); // ‚Üê URL centralizada
      const data = await response.json();

      // ‚úÖ EXTRAER LISTA DE √çTEMS DE LA API (seg√∫n estructura de cada una)
      const rawItems = currentAPI.getItems(data); // ‚Üê getItems personalizado

      // ‚úÖ FILTRO GENERAL (usa name o title si existe)
      const filtered = rawItems.filter((item) => {
        const name = (item.name || item.title || "").toLowerCase();
        return name.includes(search.toLowerCase());
      });

      // ‚úÖ MAPEAR A FORMATO EST√ÅNDAR USADO EN TU APP
      const mappedItems = filtered.map(currentAPI.mapItem); // ‚Üê formatea item

      set({ items: mappedItems, loading: false });

    } catch (error) {
      console.error("Error fetching items:", error);
      set({ loading: false });
    }
  },

  // üîé Obtener un √≠tem por ID (detalle)
  fetchItemById: async (id) => {
    set({ loadingDetail: true });

    try {
      // ‚úÖ PARTE QUE CAMBIA SEG√öN LA API USADA
      const response = await fetch(`${currentAPI.url}/${id}`); // ‚Üê ENDPOINT detalle
      const data = await response.json();
      set({ selectedItem: data, loadingDetail: false });

    } catch (error) {
      console.error("Error fetching item by ID:", error);
      set({ selectedItem: null, loadingDetail: false });
    }
  },
}));
